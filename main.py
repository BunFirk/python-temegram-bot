import asyncio
import sqlite3

from aiogram import Bot, Dispatcher, executor, types

import keyb as kb
from config import BOT_TOKEN

import requests # For Http requests
from bs4 import BeautifulSoup # For working with Html Script

URL = "https://www.tinkoff.ru/invest/currencies/" # Url of parsing page
HEADERS = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36',
           'accept': '*/*'} # Headers that will be sended to the page
Name = ""
Price = ""

def get_Html(url, params = None):
    result = requests.get(url, headers=HEADERS, params=params) # Making Http request
    return result

def get_CurrencyContent(source):
    global Name
    global Price
    soup = BeautifulSoup(source.text, "html.parser")
    Currency = soup.find_all('a', {"href": '/invest/currencies/USDRUB/'})

    item = Currency[0]
    Name = item.find('span', {"class": "NameColumn__nameWrapper_LWKdK"}).get_text() # Writing the Name of currency
    item = Currency[2]
    Price = item.find(("span", {"class": "Money-module__money_UwC2N"})).get_text() # Writing the Price of currency

    #print(Name)
    #print(Price)

def parse():
    Html_script = get_Html(URL) # Writing Html Script in variable

    if Html_script.status_code == 200:
        get_CurrencyContent(Html_script) # Calling function that getting data
    else:
        print("Request failed") # Error




loop = asyncio.get_event_loop()
bot = Bot(BOT_TOKEN)
dp = Dispatcher(bot)

Curr_Ticker = ""

@dp.message_handler(commands=['start'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ. (–í–Ω–∏–º–∞–Ω–∏–µ –≤—ã –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –∫–∞–∫ {0.username} –∏ –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å! –ï—Å–ª–∏ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–æ —É –≤–∞—Å –µ—Ç—å –∞–∫–∫–∞—É–Ω –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –≤—ã—Ö–æ–¥! –ï—Å–ª–∏ –≤—ã –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ –Ω–∞–∂–º—ë—Ç–µ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" –∏ —É –≤–∞—Å –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏–∑-–∑–∞ —ç—Ç–æ–≥–æ —É –≤–∞—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –∏ –æ–Ω–æ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–æ–Ω—è—Ç—å –≤–≤–æ–¥. –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –≤—ã –Ω–∞–∂–º—ë—Ç–µ "–í—Ö–æ–¥" –≤—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ—Å—å –∏ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ!)'.format(message.from_user), reply_markup=kb.Mnum_1)


@dp.message_handler(commands=['registration'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'.format(message.from_user))
    conn = sqlite3.connect('People.db')
    cur = conn.cursor()

    if (cur.execute('SELECT *FROM Users WHERE username = "{0.username}";'.format(message.from_user))):
        await bot.send_message(message.from_user.id, '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç!'.format(message.from_user, reply_markup=kb.Mnum_2))
    else:
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ "/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"'.format(message.from_user), reply_markup=kb.Mnum_2)

@dp.message_handler(commands=['login'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—Ö–æ–¥!'.format(message.from_user))
    conn = sqlite3.connect('People.db')
    cur = conn.cursor()

    if (cur.execute('SELECT *FROM Users WHERE username = "{0.username}";'.format(message.from_user))):
        await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ "/–í–æ–π—Ç–∏"'.format(message.from_user))
    else:
        await bot.send_message(message.from_user.id, '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!'.format(message.from_user))

@dp.message_handler(commands=['–í–æ–π—Ç–∏'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {0.username}!'.format(message.from_user), reply_markup=kb.Mnum_2)

@dp.message_handler(commands=['registration'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {0.username}!'.format(message.from_user), reply_markup=kb.Mnum_2)

@dp.message_handler(commands=['–∫—É—Ä—Å—ã_–≤–∞–ª—é—Ç_üìà'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç!'.format(message.from_user), reply_markup=kb.Mnum_3)

@dp.message_handler(commands=['–í—ã—Ö–æ–¥_üö™'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞!'.format(message.from_user), reply_markup=kb.Mnum_1)

@dp.message_handler(commands=['–¥–æ–ª–ª–∞—Ä_—Ä—É–±_üíµ'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '—ç—Ç–æ–≥–æ –Ω–µ—Ç—É –ø–æ–∫–∞ —á—Ç–æ.', reply_markup=kb.Mnum_2)

@dp.message_handler(commands=['üì∞_–ù–æ–≤–æ—Å—Ç–∏'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '–í–æ—Ç —Å–≤–æ–¥–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π', reply_markup=kb.MNews)

@dp.message_handler(commands=['üìà_–ö—Ä–∏–ø—Ç–æ'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '–¶–µ–Ω—ã –Ω–∞ –∫—Ä–∏–ø—Ç—É! (–í–Ω–∏–º–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ üíµ!)', reply_markup=kb.MKnum)

@dp.message_handler(commands=['–ö—Ä–∏–ø—Ç–æ'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∫—Ä–∏–ø—Ç–µ!', reply_markup=kb.MnBitcoin_2)

@dp.message_handler(commands=['–ù–∞–∑–∞–¥'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '–ù–∞–∑–∞–¥!', reply_markup=kb.Mnum_2)

@dp.message_handler(commands=['‚öô_–ù–∞—Å—Ç—Ä–æ–π–∫–∏'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=kb.Mse)

@dp.message_handler(commands=['Bitcoin'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, 'Bitcoin!', reply_markup=kb.MBitcoin)

@dp.message_handler(commands=['Bitcoin_News'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '–ù–æ–≤–æ—Å—Ç–∏ –æ Bitcoin! https://ru.investing.com/crypto/bitcoin/news', reply_markup=kb.MnBitcoin_3)

@dp.message_handler(commands=['Ethereum'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, 'Ethereum!', reply_markup=kb.MEthereum)

@dp.message_handler(commands=['Ethereum_News'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '–ù–æ–≤–æ—Å—Ç–∏ –æ Ethereum! https://ru.investing.com/crypto/ethereum/news', reply_markup=kb.MNEthereum)

@dp.message_handler(commands=['Binance_Coin_News'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '–ù–æ–≤–æ—Å—Ç–∏ –æ Binance Coin! https://ru.investing.com/crypto/binance-coin/news', reply_markup=kb.MNBinance_Coin)

@dp.message_handler(commands=['üìà_–ê–∫—Ü–∏–∏'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ç –ê–∫—Ü–∏–∏!', reply_markup=kb.Ak)

@dp.message_handler(commands=['üíµ_–í–∞–ª—é—Ç—ã'])
async def process_hello(message: types.Message):
    await bot.send_message(message.from_user.id, '–í–∞–ª—é—Ç—ã!', reply_markup=kb.NM)

@dp.message_handler(commands=['—Ä—É–±–ª—å_–¥–æ–ª–ª–æ—Ä'])
async def process_hello(message: types.Message):
    global Curr_Ticker
    parse()
    await bot.send_message(message.from_user.id, Price, reply_markup=kb.NM_2)
    conn = sqlite3.connect('People.db')
    cur = conn.cursor()
    Curr_Ticker = "USDRUB"

@dp.message_handler(commands=['—Ä—É–±–ª—å_—é–∞–Ω—å'])
async def process_hello(message: types.Message):
    global Curr_Ticker
    parse()
    await bot.send_message(message.from_user.id, Price, reply_markup=kb.NM_2)
    conn = sqlite3.connect('People.db')
    cur = conn.cursor()
    Curr_Ticker = "CNYRUB"

@dp.message_handler(commands=['—Ä—É–±–ª—å_–µ–≤—Ä–æ'])
async def process_hello(message: types.Message):
    global Curr_Ticker
    parse()
    await bot.send_message(message.from_user.id, Price, reply_markup=kb.back)
    conn = sqlite3.connect('People.db')
    cur = conn.cursor()
    Curr_Ticker = "EURRUB"

@dp.message_handler(commands=['—Ä—É–±–ª—å_–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π_–§—Ä–∞–Ω–∫'])
async def process_hello(message: types.Message):
    global Curr_Ticker
    parse()
    await bot.send_message(message.from_user.id, Price, reply_markup=kb.NM_2)
    conn = sqlite3.connect('People.db')
    cur = conn.cursor()
    Curr_Ticker = "CHFRUB"

@dp.message_handler(commands=['—Ä—É–±–ª—å_–§—É–Ω—Ç'])
async def process_hello(message: types.Message):
    global Curr_Ticker
    parse()
    await bot.send_message(message.from_user.id, Price, reply_markup=kb.NM_2)
    conn = sqlite3.connect('People.db')
    cur = conn.cursor()
    Curr_Ticker = "GBPRUB"

@dp.message_handler(commands=['—Ä—É–±–ª—å_–ò–µ–Ω–∞'])
async def process_hello(message: types.Message):
    global Curr_Ticker
    parse()
    await bot.send_message(message.from_user.id, Price, reply_markup=kb.NM_2)
    conn = sqlite3.connect('People.db')
    cur = conn.cursor()
    Curr_Ticker = "JPYRUB"

if __name__ == "__main__":
    from handlers import dp, send_to_admin
    executor.start_polling(dp, on_startup=send_to_admin)
